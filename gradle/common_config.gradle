// 通用配置

// 图片压缩 ./gradlew tinyPng
apply plugin: 'tinypng'

tinyInfo {
    resourceDir = [
            // your res dir
            "$projectDir/src/main/res",
    ]
    resourcePattern = [
            // your res pattern
            "drawable[a-z-]*",
            "mipmap[a-z-]*"
    ]
    whiteList = [
            // your white list, support Regular Expressions
    ]
    // https://tinypng.com/dashboard/developers  需申请
    // apiKey = 'Nb6AB0YFVYLB-8UIf4Ytbzm1BY9PLL80'
    // apiKey = 'DIFKsH6z7pjQ499IsNC9O65UnTjFKSkS'
    // apiKey = 'qxkGaRbWWZVbMrJx7hJyWWyVlAudvWVA'
    // apiKey = 'wVwpSc8tM066brCKnZx74dvKpJdc7CZq'
    apiKey = '7N4mW30Cj4qLhkfmcRkvhStLHXVlrxNh'
}

// 是否在 Base 工程
ext.isBaseProject = {
    rootProject.name == 'Base'
}

// 是否在 Common 工程
ext.isCommonProject = {
    rootProject.name == 'Common'
}

def wanderApi(Object p, Closure excludeClosure = null) {
    if (!(p instanceof Project) && !(p instanceof String)) {
        throw new GradleException("[wanderApi] 无效的 api 类型")
    }
    // 路径：maven 或者 本地路径
    String sourcePath = (p instanceof String) ? p : ((Project) p).path

    dependencies {
        // 直接 maven 依赖，类似 com.wander.base:utils:0.1.0
        if (!sourcePath.startsWith(":")) {
            String mavenAddress = sourcePath
            // 需要把 Maven aar 依赖转换成 project 依赖
            if (rootProject.hasProperty('projectMavenMap') && rootProject.ext.projectMavenMap.size() > 0) {
                Map<String, String> projectMavenMap = rootProject.ext.projectMavenMap

                String[] sourceSplit = mavenAddress.split(":")

                for (Map.Entry<String, String> entry : projectMavenMap.entrySet()) {
                    // entry.value = groupId : artifactId
                    String[] localSplit = entry.value.split(":")

                    if (sourceSplit[0] == localSplit[0] && sourceSplit[1] == localSplit[1]) {
                        // project 依赖
                        if (excludeClosure != null) {
                            api(project(path: entry.key), excludeClosure)
                        } else {
                            api(project(path: entry.key))
                        }
                        println("[wanderApi] project " + entry.key)
                        return
                    }
                }
            }
            // 走正常的 maven 依赖
            if (excludeClosure != null) {
                api(mavenAddress, excludeClosure)
            } else {
                api(mavenAddress)
            }
            println("[wanderApi] mavenAddress : " + mavenAddress)
        } else {
            // 未找到宿主中的 module
            if (rootProject.findProject(sourcePath) == null) {
                throw new GradleException("[wanderApi] not find project " + sourcePath)
            }
            // project依赖
            if (p == null) {
                p = project(sourcePath)
            }
            println("[wanderApi] project : " + sourcePath)
            if (excludeClosure != null) {
                api(p, excludeClosure)
            } else {
                api(p)
            }
        }
    }
}

ext {
    wanderApi = this.&wanderApi
}

// 多 flavor 依赖
def flavorApi(String flavorName, Object p, Closure excludeClosure = null) {
    if (!(p instanceof Project) && !(p instanceof String)) {
        println("object p : " + p)
        throw new GradleException("[flavorApi] 无效的 api 类型")
    }
    // 路径：maven 或者 本地路径
    String sourcePath = (p instanceof String) ? p : ((Project) p).path

    dependencies {
        // 直接 maven 依赖，类似 com.wander.base:utils:0.1.0
        if (!sourcePath.startsWith(":")) {
            String mavenAddress = sourcePath
            // 需要把 Maven aar 依赖转换成 project 依赖
            if (rootProject.hasProperty('projectMavenMap') && rootProject.ext.projectMavenMap.size() > 0) {
                Map<String, String> projectMavenMap = rootProject.ext.projectMavenMap

                String[] sourceSplit = mavenAddress.split(":")

                for (Map.Entry<String, String> entry : projectMavenMap.entrySet()) {
                    // entry.value = groupId : artifactId
                    String[] localSplit = entry.value.split(":")

                    if (sourceSplit[0] == localSplit[0] && sourceSplit[1] == localSplit[1]) {
                        // project 依赖
                        if (excludeClosure != null) {
                            api(project(path: entry.key), excludeClosure)
                        } else {
                            api(project(path: entry.key))
                        }
                        println("[flavorApi] project " + entry.key)
                        return
                    }
                }
            }
            // 走正常的 maven 依赖
            if (excludeClosure != null) {
                if (flavorName) {
                    "${flavorName}Api"("${mavenAddress}-${flavorName}", excludeClosure)
                } else {
                    api(mavenAddress, excludeClosure)
                }
            } else {
                if (flavorName) {
                    "${flavorName}Api"("${mavenAddress}-${flavorName}")
                } else {
                    api(mavenAddress)
                }
            }
            println("[flavorApi] mavenAddress : " + mavenAddress)
        } else {
            // 未找到宿主中的 module
            if (rootProject.findProject(sourcePath) == null) {
                throw new GradleException("[flavorApi] not find project " + sourcePath)
            }
            // project依赖
            if (p == null) {
                p = project(sourcePath)
            }
            println("[flavorApi] project : " + sourcePath)
            if (excludeClosure != null) {
                api(p, excludeClosure)
            } else {
                api(p)
            }
        }
    }
}

ext {
    flavorApi = this.&flavorApi
}

